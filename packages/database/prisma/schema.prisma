generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

/// =========================
/// ğŸ“Œ EnumÃ©ration des rÃ´les
/// =========================
/// - patient : utilisateur venant se faire soigner.
/// - medecin : mÃ©decin attachÃ© Ã  lâ€™hÃ´pital.
/// - admin : administrateur de lâ€™hÃ´pital.
enum Role {
  patient
  medecin
  admin
}

enum FonctionAdmin {
  gestionnaire
  super_admin
}

enum Sexe {
  Homme
  Femme
  Autre
}

enum GroupeSanguin {
  A_POSITIF
  A_NEGATIF
  B_POSITIF
  B_NEGATIF
  AB_POSITIF
  AB_NEGATIF
  O_POSITIF
  O_NEGATIF
  INCONNU
}

enum StatutRendezVous {
  CONFIRME
  ANNULE
  EN_ATTENTE
  TERMINE
}

/// =========================
/// ğŸ“Œ Utilisateur global
/// =========================
model Utilisateur {
  id           String      @id @default(uuid())
  nom          String
  prenom       String?
  email        String      @unique
  telephone    String?
  dateCreation DateTime    @default(now())

  // Relations
  administrateur     Administrateur?   /// Profil administrateur liÃ© Ã  lâ€™utilisateur
  patient            Patient?          /// Profil patient liÃ© Ã  lâ€™utilisateur
  medecin            Medecin?          /// Profil mÃ©decin liÃ© Ã  lâ€™utilisateur
  rendezVous         RendezVous[]      /// Liste des rendez-vous liÃ©s Ã  lâ€™utilisateur
  utilisateurHopitals UtilisateurHopital[] /// RÃ´les de lâ€™utilisateur dans diffÃ©rents hÃ´pitaux
}

/// =========================
/// ğŸ“Œ Administrateur
/// =========================
model Administrateur {
  id       String        @id @default(uuid())
  fonction FonctionAdmin @default(gestionnaire)
  userId   String        @unique

  // Relations
  utilisateur Utilisateur @relation(fields: [userId], references: [id], onDelete: Cascade) /// Utilisateur associÃ©
}

/// =========================
/// ğŸ“Œ Patient
/// =========================
model Patient {
  id            String        @id @default(uuid())
  dateNaissance DateTime
  adresse       String?
  groupeSanguin GroupeSanguin @default(INCONNU)
  poids         Float?
  taille        Float?
  sexe          Sexe          @default(Homme)
  userId        String        @unique

  // Relations
  utilisateur Utilisateur @relation(fields: [userId], references: [id], onDelete: Cascade) /// Utilisateur associÃ©
  documents   Document[]   /// Documents mÃ©dicaux liÃ©s au patient
  rendezVous  RendezVous[] /// Rendez-vous liÃ©s au patient
}

/// =========================
/// ğŸ“Œ Medecin
/// =========================
model Medecin {
  id              String   @id @default(uuid())
  specialiteId    String
  numLicence      String   @unique
  anneeExperience Int?
  titre           String
  userId          String   @unique

  // Relations
  utilisateur     Utilisateur @relation(fields: [userId], references: [id], onDelete: Cascade) /// Utilisateur associÃ©
  specialite      Specialite  @relation(fields: [specialiteId], references: [id]) /// SpÃ©cialitÃ© mÃ©dicale du mÃ©decin
  rendezVous      RendezVous[] /// Rendez-vous assignÃ©s au mÃ©decin
  recommandations Recommandation[] /// Recommandations Ã©mises par le mÃ©decin
}

/// =========================
/// ğŸ“Œ Document
/// =========================
model Document {
  id           String   @id @default(uuid())
  titre        String
  description  String?
  dateCreation DateTime @default(now())
  patientId    String?
  url          String   /// URL du fichier document

  // Relations
  patient Patient? @relation(fields: [patientId], references: [id], onDelete: Cascade) /// Patient associÃ©
}

/// =========================
/// ğŸ“Œ RendezVous
/// =========================
model RendezVous {
  id            String           @id @default(uuid())
  date          DateTime
  heure         String
  statut        StatutRendezVous @default(EN_ATTENTE)
  utilisateurId String
  medecinId     String
  patientId     String

  // Relations
  utilisateur Utilisateur @relation(fields: [utilisateurId], references: [id]) /// Utilisateur ayant crÃ©Ã© le rendez-vous
  medecin     Medecin     @relation(fields: [medecinId], references: [id]) /// MÃ©decin associÃ© au rendez-vous
  patient     Patient     @relation(fields: [patientId], references: [id]) /// Patient associÃ© au rendez-vous
}

/// =========================
/// ğŸ“Œ Hopital
/// =========================
model Hopital {
  id           String   @id @default(uuid())
  nom          String
  adresse      String
  description  String?
  contact      String
  localisation String?

  // Relations
  utilisateurHopitals UtilisateurHopital[] /// Liste des utilisateurs et leurs rÃ´les dans lâ€™hÃ´pital
}

/// =========================
/// ğŸ“Œ Specialite
/// =========================
model Specialite {
  id          String   @id @default(uuid())
  nom         String
  description String?

  // Relations
  medecins Medecin[] /// MÃ©decins associÃ©s Ã  cette spÃ©cialitÃ©
}

/// =========================
/// ğŸ“Œ Recommandation
/// =========================
model Recommandation {
  id        String   @id @default(uuid())
  contenu   String
  medecinId String
  date      DateTime @default(now())

  // Relations
  medecin Medecin @relation(fields: [medecinId], references: [id], onDelete: Cascade) /// MÃ©decin ayant Ã©mis la recommandation
}

/// =========================
/// ğŸ“Œ UtilisateurHopital
/// =========================
model UtilisateurHopital {
  id            String   @id @default(uuid())
  utilisateurId String
  hopitalId     String
  role          Role     // rÃ´le spÃ©cifique Ã  cet hÃ´pital
  dateDebut     DateTime @default(now())
  dateFin       DateTime?

  // Relations
  utilisateur Utilisateur @relation(fields: [utilisateurId], references: [id], onDelete: Cascade) /// Utilisateur associÃ©
  hopital     Hopital     @relation(fields: [hopitalId], references: [id], onDelete: Cascade) /// HÃ´pital associÃ©

  @@unique([utilisateurId, hopitalId, role])
}
